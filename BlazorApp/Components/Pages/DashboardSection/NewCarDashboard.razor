@namespace BlazorApp.Components.Pages.DashboardSection
@rendermode InteractiveServer
@using BlazorApp.Service
@using BlazorApp.Components.Pages.Forms
@inject IJSRuntime JSRuntime
@inject DBService DbService
@inject MiniCooper.BaseMiniCooper BaseCooper
@inject MiniCooper.EvMiniCooper EvCooper
@inject MiniCooper.FossilMiniCooper FossilCooper
@inject MiniCooper.HybridMiniCooper HybridCooper
@inject MiniCooper.FullMiniCooper FullCooper
@inject UsersService.User user
@* Remember to add scoped versions of these in the Program.cs *@

<div class="dropdown">
    <a class="btn btn-secondary custom-layout dropdown-toggle btn-lg" href="#" role="button" data-bs-toggle="dropdown"
       aria-expanded="false">
        Vehicle Options
    </a>

    <ul class="dropdown-menu">
        <li>
            <button class="dropdown-item" type="submit" onclick="@(() => HandleOptionChange("ev"))">Electric</button>
        </li>
        <li>
            <button class="dropdown-item" type="submit" onclick="@(() => HandleOptionChange("fossil"))">Fossil</button>
        </li>
        <li>
            <button class="dropdown-item" type="submit" onclick="@(() => HandleOptionChange("hybrid"))">Hybrid</button>
        </li>
    </ul>
</div>

<EditForm Model="@BaseCooper" OnValidSubmit="@HandleValidSubmit">
    <label class="form-label">Model Name:</label>
    <InputText @bind-Value="BaseCooper.ModelName" class="form-control"/>

    <label class="form-label">Generation:</label>
    <InputNumber @bind-Value="BaseCooper.Generation" class="form-control"/>

    <label class="form-label">Model Type:</label>
    <InputText @bind-Value="BaseCooper.ModelType" class="form-control"/>

    <label class="form-label">Color:</label>
    <InputText @bind-Value="BaseCooper.Color" class="form-control"/>

    <label class="form-label">Price:</label>
    <InputNumber @bind-Value="BaseCooper.Price" class="form-control"/>

    <label class="form-label">Mileage:</label>
    <InputNumber @bind-Value="BaseCooper.Mileage" class="form-control"/>

    <label class="form-label">Max range:</label>
    <InputNumber @bind-Value="BaseCooper.MaxRange" class="form-control"/>

    <label class="form-label">Weight:</label>
    <InputNumber @bind-Value="BaseCooper.Weight" class="form-control"/>

    <label class="form-label">Fuel type:</label>
    <InputText @bind-Value="BaseCooper.FuelType" class="form-control"/>

    <label class="form-label">Gear type:</label>
    <InputText @bind-Value="BaseCooper.GearType" class="form-control"/>

    <label class="form-label">Yearly tax:</label>
    <InputNumber @bind-Value="BaseCooper.YearlyTax" class="form-control"/>


    @switch (form)
    {
        case "ev":
            <EvForm EvCooperFormData="@EvCooper"/>
            break;
        case "fossil":
            <FossilForm FossilCooperFormData="@FossilCooper"/>
            break;
        case "hybrid":
            <HybridForm HybridCooperFormData="@HybridCooper"/>
            break;
        default:
            <p>Select Vehicle Type</p>
            break;
    }

    <button type="submit" class="btn btn-primary">Submit Car</button>
</EditForm>

<InputFile OnChange="HandleImages" multiple class="btn btn-secondary"/>

@foreach (var file in loadedImages)
{
    <li>
        <ul>
            <li>Name: @file.Name</li>
            <li>Last modified: @file.LastModified.ToString()</li>
            <li>Size (bytes): @file.Size</li>
            <li>Content type: @file.ContentType</li>
        </ul>
    </li>
}

@foreach (var image in BaseCooper.Base64Images)
{
    <img src="data:image/png;base64,@image" alt="Ops..."/>
}

<!-- No form Modal -->
<div class="modal fade" id="no-form-modal" tabindex="-1" aria-labelledby="noFormModal" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="noFormModal">No base for selected!</h1>
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- No picture(s) Modal -->
<div class="modal fade" id="no-picture-modal" tabindex="-1" aria-labelledby="noPictureModal" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="noPictureModal">You need at least 1 picture for your Cooper!</h1>
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Successfully added cooper -->
<div class="modal fade" id="successful-cooper" tabindex="-1" aria-labelledby="successfulCooper" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="successfulCooper">Cooper added!</h1>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>
    function showNoFormModal() {
        const modalElement = document.getElementById("no-form-modal");
        const modalInstance = new bootstrap.Modal(modalElement);
        modalInstance.show();
    }

    function showNoPictureModal() {
        const modalElement = document.getElementById("no-picture-modal");
        const modalInstance = new bootstrap.Modal(modalElement);
        modalInstance.show();
    }

    function showSuccessfulCooperModal() {
        const modalInstance = new bootstrap.Modal(document.getElementById("successful-cooper"));
        modalInstance.show();
    }
</script>

@code {
    string form = "";

    private async Task HandleValidSubmit()
    {
        if (form == "")
        {
            Console.WriteLine("No car base selected");
            await JSRuntime.InvokeVoidAsync("showNoFormModal");
            return;
        }

        if (loadedImages.Count == 0)
        {
            Console.WriteLine("No images are loaded");
            await JSRuntime.InvokeVoidAsync("showNoPictureModal");
            return;
        }

        Console.WriteLine("Handling valid submit...");
        if (form == "ev")
        {
            await EvCooper.SetBaseMiniCooper(BaseCooper);
            FullCooper.SetMiniCooper(EvCooper);
            FullCooper.PrintEv();

            if (FullCooper.GetEvCooper() == null)
            {
                Console.WriteLine("The Ev being pushed to the database is null.");
                return;
            }

            if (FullCooper.HasMultipleCars())
            {
                Console.WriteLine("SOMEHOW, FullCooper object has more than 1 Cooper.");
                return;
            }

            await DbService.AddEvToDbAsync(FullCooper.GetEvCooper(), user.Id);
        }
        else if (form == "fossil")
        {
            await FossilCooper.SetBaseMiniCooper(BaseCooper);
            FullCooper.SetMiniCooper(FossilCooper);
            FullCooper.PrintFossil();

            if (FullCooper.GetFossilCooper() == null)
            {
                Console.WriteLine("The Fossil being pushed to the database is null.");
                return;
            }

            await DbService.AddFossilToDbAsync(FullCooper.GetFossilCooper(), user.Id);
        }
        else if (form == "hybrid")
        {
            await HybridCooper.SetBaseMiniCooper(BaseCooper);
            FullCooper.SetMiniCooper(HybridCooper);
            FullCooper.PrintHybrid();

            if (FullCooper.GetHybridCooper() == null)
            {
                Console.WriteLine("The Hybrid being pushed to the database is null.");
                return;
            }

            await DbService.AddHybridToDbAsync(FullCooper.GetHybridCooper(), user.Id);
        }
        else
        {
            Console.WriteLine("Invalid form type");
        }

        FullCooper.Clear();
        BaseCooper.ClearBaseCooper();
        loadedImages = new();
        await JSRuntime.InvokeVoidAsync("showSuccessfulCooperModal");
        StateHasChanged();
    }

    private void HandleOptionChange(string option)
    {
        Console.WriteLine("Handling option...");
        form = option;
        StateHasChanged();
    }

    private List<IBrowserFile> loadedImages = new();

    private async Task HandleImages(InputFileChangeEventArgs imageFiles)
    {
        foreach (var image in imageFiles.GetMultipleFiles())
        {
            if (!image.ContentType.Contains("image"))
            {
                Console.WriteLine($"\"{image.ContentType}\" is not allowed");
                // Popup message saying so.
                return;
            }

            try
            {
                await BaseCooper.AddImage(image);
                loadedImages.Add(image);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error getting file: " + ex.Message);
                // Perhaps, display error message.
                return;
            }
        }
    }

}