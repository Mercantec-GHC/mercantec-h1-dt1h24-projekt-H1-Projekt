@page "/new-car"
@using BlazorApp.Service
@using BlazorApp.Components.Pages.Forms
@inject DBService DbService
@inject MiniCooper.BaseMiniCooper BaseCooper
@inject MiniCooper.EvMiniCooper Ev
@inject MiniCooper.FossilMiniCooper Fossil
@inject MiniCooper.HybridMiniCooper Hybrid
@inject MiniCooper.FullMiniCooper FullCooper
@* Remember to add scoped versions of these in the Program.cs *@

<div class="dropdown">
    <a class="btn btn-secondary custom-layout dropdown-toggle btn-lg" href="#" role="button" data-bs-toggle="dropdown"
       aria-expanded="false">
        Vehicle Options
    </a>

    <ul class="dropdown-menu">
        <li>
            <button class="dropdown-item" type="submit" onclick="@(() => HandleOptionChange("ev"))">Electric</button>
        </li>
        <li>
            <button class="dropdown-item" type="submit" onclick="@(() => HandleOptionChange("fossil"))">Fossil</button>
        </li>
        <li>
            <button class="dropdown-item" type="submit" onclick="@(() => HandleOptionChange("hybrid"))">Hybrid</button>
        </li>
    </ul>
</div>

<EditForm Model="@BaseCooper" OnValidSubmit="@HandleValidSubmit">
    <label class="form-label">Model Name:</label>
    <InputText @bind-Value="BaseCooper.ModelName"/>

    <label class="form-label">Generation:</label>
    <InputNumber @bind-Value="BaseCooper.Generation"/>

    <label class="form-label">Model Type:</label>
    <InputText @bind-Value="BaseCooper.ModelType"/>

    <label class="form-label">Color:</label>
    <InputText @bind-Value="BaseCooper.Color"/>

    <label class="form-label">Price:</label>
    <InputNumber @bind-Value="BaseCooper.Price"/>

    <label class="form-label">Mileage:</label>
    <InputNumber @bind-Value="BaseCooper.Mileage"/>

    <label class="form-label">Max range:</label>
    <InputNumber @bind-Value="BaseCooper.MaxRange"/>

    <label class="form-label">Weight:</label>
    <InputNumber @bind-Value="BaseCooper.Weight"/>

    <label class="form-label">Fuel type:</label>
    <InputText @bind-Value="BaseCooper.FuelType"/>

    <label class="form-label">Gear type:</label>
    <InputText @bind-Value="BaseCooper.GearType"/>

    <label class="form-label">Yearly tax:</label>
    <InputNumber @bind-Value="BaseCooper.YearlyTax"/>
    
    @switch (form)
    {
        case "ev":
            <EvForm EvFormData="@Ev"/>
            break;
        case "fossil":
            <FossilForm FossilFormData="@Fossil"/>
            break;
        case "hybrid":
            <HybridForm HybridFormData="@Hybrid"/>
            break;
        default:
            <p>Select Vehicle Type</p>
            break;
    }

    <button type="submit">Submit Car</button>
</EditForm>



<InputFile OnChange="HandleImages" multiple/>

@foreach (var file in loadedFiles)
{
    <li>
        <ul>
            <li>Name: @file.Name</li>
            <li>Last modified: @file.LastModified.ToString()</li>
            <li>Size (bytes): @file.Size</li>
            <li>Content type: @file.ContentType</li>
        </ul>
    </li>
}

@foreach (var image in BaseCooper.Base64Images)
{
    <img src="data:image/png;base64,@image" alt="Ops..." />
}

@code {
    string form = "";
    List<MiniCooper.FullMiniCooper> minis = new();
    protected override async Task OnInitializedAsync()
    {
        minis = await DbService.GetMiniCoopersAsync();

        foreach (var car in minis)
        {
            car.PrintAutomatically();
        }
    }

    public async Task HandleValidSubmit()
    {
        if (form == "")
        {
            Console.WriteLine("No car base selected");
            // Message saying that the user needs to pick an option.
            return;
        }
        
        if (loadedFiles.Count == 0)
        {
            Console.WriteLine("No images are loaded");
            // Message saying that the user needs at least 1 picture.
            return;
        }
        
        Console.WriteLine("Handling valid submit...");
        if (form == "ev")
        {
            await Ev.SetBaseMiniCooperModel(BaseCooper);
            FullCooper.SetMiniCooper(Ev);
            FullCooper.PrintEv();

            if (FullCooper.GetEvCooper() == null)
            {
                Console.WriteLine("The Ev being pushed database is null.");
                return;
            }

            if (FullCooper.HasMultipleCars())
            {
                Console.WriteLine("SOMEHOW, FullCooper object has more than 1 Cooper.");
                return;
            }
            
            await DbService.AddEvToDbAsync(FullCooper.GetEvCooper(), 99);
            
            FullCooper.Clear();
        }
        else if (form == "fossil")
        {
            await Fossil.SetBaseMiniCooperModel(BaseCooper);
            FullCooper.SetMiniCooper(Fossil);
            FullCooper.PrintFossil();
            
            if (FullCooper.GetFossilCooper() == null)
                return;
            
            await DbService.AddFossilToDbAsync(FullCooper.GetFossilCooper(), 99);
            
            FullCooper.Clear();
        }
        else if (form == "hybrid")
        {
            await Hybrid.SetBaseMiniCooperModel(BaseCooper);
            FullCooper.SetMiniCooper(Hybrid);
            FullCooper.PrintHybrid();
            
            if (FullCooper.GetHybridCooper() == null)
                return;
            
            await DbService.AddHybridToDbAsync(FullCooper.GetHybridCooper(), 99);

            FullCooper.Clear();
        }
        else
        {
            Console.WriteLine("Invalid form type");
        }

    }

    private void HandleOptionChange(string option)
    {
        Console.WriteLine("Handling option...");
        form = option;
        StateHasChanged();
    }

    private List<IBrowserFile> loadedFiles = new();

    private async Task HandleImages(InputFileChangeEventArgs imageFiles)
    {
        foreach (var image in imageFiles.GetMultipleFiles())
        {
            if (!image.ContentType.Contains("image"))
            {
                Console.WriteLine($"\"{image.ContentType}\" is not allowed");
                return;
            }

            try
            {
                await BaseCooper.AddImage(image);
                loadedFiles.Add(image);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error getting file: " + ex.Message);
                // Perhaps, display error message.
                return;
            }
        }
    }

}