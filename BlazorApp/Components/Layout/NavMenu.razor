@using BlazorApp.Service
@inject DBService DbService
@inject UsersService.User user
@inject NavigationManager NavigationManager

@* Top page navbar*@
<nav class="navbar navbar-expand-lg" style="background-color: #012169">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">
            <img src="/images/Minibasen Mini.png" alt="Minibasen"/>
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavAltMarkup"
                aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
            <div class="navbar-nav">
                <a class="nav-link active" aria-current="page" href="#" style="color: white;">Home</a>
            </div>
            <div class="navbar-nav  ms-auto">

                @if (user.Id == 0)
                {
                    @* Knap for login modal *@
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#loginModal">
                        Login
                    </button>
                }
                else
                {
                    <a href="/user-dashboard"><p style="color: white">@user.Name Dashboard</p></a>
                    <button type="button" class="btn btn-danger" onclick="@LogUserOut">Logout</button>
                }

            </div>
        </div>
    </div>
</nav>

@* Login modal form *@
<div class="modal fade" id="loginModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Login Form</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="@user" OnValidSubmit="@HandleLogin">
                    <label class="col-form-label">Email</label>
                    <InputText @bind-Value="user.Email"/>

                    <label class="col-form-label">Password</label>
                    <InputText @bind-Value="user.Password"/>

                    <button type="submit" class="btn btn-primary">Login</button>
                </EditForm>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="@LoadRegisterForm">Register</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
            @if (loadRegisterForm)
            {
                <div class="modal-footer">
                    <EditForm Model="@user" OnSubmit="@HandleRegister">
                        <DataAnnotationsValidator/>
                        
                        <label>Full Name</label>
                        <InputText @bind-Value="user.Name"/>
                        
                        <label>Password</label>
                        <InputText @bind-Value="user.Password"/>
                        
                        <label>Mobile Number</label>
                        <InputNumber @bind-Value="user.Mobile"/>
                        
                        <label>Email</label>
                        <InputText @bind-Value="user.Email"/>
                        
                        <label>City</label>
                        <InputText @bind-Value="user.City"/>
                        
                        <label>Address</label>
                        <InputText @bind-Value="user.Address"/>
                        
                        <button type="submit" class="btn btn-primary">Register Account</button>
                    </EditForm>
                </div>
            }
        </div>
    </div>
</div>

@code{
    bool loadRegisterForm = false;

    private async Task HandleRegister()
    {
        await DbService.AddUserAsync(user);
    }

    private void LoadRegisterForm()
    {
        loadRegisterForm = loadRegisterForm == false;
    }

    private async Task HandleLogin()
    {
        var tempUser = await DbService.LogUserOn(user.Email, user.Password);

        if (tempUser.Id == 0)
        {
            Console.WriteLine("User was not found");
            return;
        }

        user.SetUser(tempUser);
        user.Print();

        NavigationManager.NavigateTo("/user-dashboard");
    }

    private void LogUserOut()
    {
        user.Clear();
        NavigationManager.NavigateTo("/");
    }

}